JRE:
    Java运行环境(Java Runtime Environment),也就是Java程序运行的必需组件,包含Java虚拟机及Java核心类库等
JDK:
    Java开发工具包(Java Developer's Kit),包含了JRE和一系列开发、诊断工具
JVM:
    1.跨平台性
        C++代码编译成CPU能理解的机器码。
        Java程序通过编译器将代码转换成JVM所能识别的指令序列，也就是Java字节码(因为Java字节码指令的操作码为一个字节)
        JVM可以通过硬件实现，但更常见的是在各个平台(Windows、Linux)提供的软件实现,这样同样的字节码在不同平台上被不同
        的JVM翻译(具体怎么翻译，主要有两种形式)成针对不同平台的机器码来执行，实现Java语言的跨平台性。
    2.托管环境
        助我们处理很多与业务无关但对于程序运行同样重要的事情，比如内存管理和垃圾回收，还有数组越界、动态类型、安全权限等动态检测

JVM如何运行字节码
    1.虚拟机角度
        jvm内存划分
            线程共享：方法区、堆
            线程私有：PC寄存器、Java方法栈、本地方法栈(被native修饰的方法，如arraysCopy())
        加载class文件到jvm，存放在方法区(method area),实际运行时执行方法区内的代码
        每次调用一个java方法，在java方法栈中生成一个栈帧，用来存放局部变量以及字节码操作数，栈帧大小是提前计算好的，而且不要求栈帧在内存中连续分布
        当退出当前执行方法时，不管正常还是异常返回，jvm均会弹出当前线程的当前栈帧
    2.硬件角度
        java字节码无法直接执行，需要jvm将字节码翻译成机器码
        1)解释执行:逐条将字节码翻译成机器码并执行
        2)即时编译(Just-In-Time-compilation,JIT):将一个方法中所有字节码编程成机器码后执行
        前者的优势在于无需等待编译，后者优势在于实际运行速度更快，原因是后者是在编译时拥有程序的运行时信息，并根据信息做出相对优化
        HotSpot默认采用混合模式，先解释执行字节码，然后将反复执行的热点代码，以方法为单位即时编译
        解释执行和即时编译可以同时进行，编译后的机器码在下次调用该方法时启用，替换原本的解释执行

JVM的运行效率
    HotSpot内置了多个即时编译器：C1、C2和Graal(Java 10引入)
    C1：又叫Client编译器，面向的是对启动性能有要求的客户端GUI程序，优化简单，编译时间短
    C2：又叫Server编译器，面向的是对峰值性能有要求的服务器端程序，优化复杂，时间长，但生成代码的执行效率高
    Java 7开始，HotSpot默认采用分层编译的方式，热点方法先由C1编译，而后热点中的热点由C2编译，
    HotSpot的即时编译是放在额外的编译线程中进行的，根据cpu的数量，按1:2的比例配置C1及C2
    