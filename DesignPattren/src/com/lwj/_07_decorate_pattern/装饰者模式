第一步：我们有一个Phone接口，该接口定义了Phone的功能

第二步：我们有一个最简单的实现类iPhoneX

第三步：写一个装饰器抽象类PhoneDecorate，以组合(构造函数传递)的方式接收我们最简单的实现类iPhoneX。
其实装饰器抽象类的作用就是代理(核心的功能还是由最简单的实现类iPhoneX来做，只不过在扩展的时候可以添加一些没有的功能而已)。

第四步：想要扩展什么功能，就继承PhoneDecorate装饰器抽象类，
将想要增强的对象(最简单的实现类iPhoneX或者已经被增强过的对象)传进去，完成我们的扩展！

对象增强的三种方式：
    继承
    代理模式
    装饰模式

优点：
    装饰类和被装饰类是可以独立的，低耦合的。互相都不用知道对方的存在

    装饰模式是继承的一种替代方案，无论包装多少层，返回的对象都是is-a的关系(上面的例子：包装完还是Phone类型)。

    实现动态扩展，只要继承了装饰器就可以动态扩展想要的功能了

应用举例：
    IO流
    Request

