CentOS	192.168.25.128

zookeeper作为dubbo中间件的服务注册中心
#  /root/zkServerStart.sh
port 2181

dubboadmin	帐号/密码 root/root
#  /root/dubboadminStart.sh
http://192.168.25.128:8080/dubboadmin  

activamq消息队列
管理界面 http://192.168.25.128:8161/ web服务的端口号
#  /root/activemqStart.sh
————————————————————————————————————————————————————————————————————————
CentOS_Redis  192.168.25.129

Redis单机版
#  /root/redisStart.sh
port 6379

Redis集群版
#  /root/redisClusterStart.sh

——————————————————————————————————————————————————————————————————————————

/usr/local/solr-cloud/zookeeper01/conf/zoo.cfg(zoo_sample.cfg改名)
clientport=2181/2182/2183	 zookeeper节点启动的端口号
server.1=192.168.25.129:2881:3881  2881：zookeeper节点间通信端口号 3881：节点间投票选举端口号
server.2=192.168.25.129:2882:3882
server.3=192.168.25.129:2883:3883
#  /root/redisStart.sh

/usr/local/solr-cloud/tomcat01/02/03/04  192.168.25.129:8180/8280/8380/8480 /solr 

solr集群版启动：
#  /root/solrcloudStart.sh
/usr/local/solr-cloud/start-tomcat-all.sh
/usr/local/solr-cloud/start-zookeeper-all.sh
http://192.168.25.129:8180/solr

solr单机版启动：
#  /root/solrstart.sh
http://192.168.25.129:8080/solr
切换还需要在e3-search-service中的applicationContext-solr.xml中修改配置文件



——————————————————————————————————————————————————————————————————————
localhost:8080	manager             提供后台服务
localhost:8081	manager-web         展示后台管理
localhost:8082	portal-web          主页，商城入口
localhost:8083  conten              提供修改主页展示内容
localhost:8084	search              提供查询服务
localhost:8085  search-web          展示查询结构
localhost:8086	item-web            展示详细商品信息
localhost:8087	sso                 
localhost:8088  sso-web             
localhost:8089	cart                
localhost:8090	cart-web            
localhost:8091	order               
localhost:8092	order-web           

———————————————————————————————————————————————————————————————————————
@Service注解的类会在spring容器加载的时候被扫描器扫描到，然后在容器中创建id为一个类名首字母小写的bean

@Resource
private Destination topicDestination;
<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg value="itemAddTopic" />
</bean>
@Resource 首先会根据属性的引用名称到spirng容器中寻找相同id的bean，如果找不到则会匹配相同类型的bean

maven项目install会在本地仓库打包成jar包然后可以被其他maven工程调用

springmvc.xml也可以初始化容器

项目启动卡住不动，不报错原因大致如下：  可以将log4j.properties配置文件拷到resource下
    1.数据库连接异常
    2.zookeeper连接异常
    3.mapper.xml创建重复

classpath指的是编译后的class文件的位置，也就是整个项目资源的入口，配置文件会和存放字节码文件的包在同一目录下，这个目录就是classpath

需要经过网络传输的对象必须实现序列化接口，Serializable

linux查看控制台		tail -f logs/catalina.out	查看tomcat启动情况

IDEA SVN 颜色
绿色，已经加入控制暂未提交
红色，未加入版本控制
蓝色，加入，已提交，有改动
白色，加入，已提交，无改动
灰色：版本控制已忽略文件。

dubbo   管理中间件的架构 展示层和业务层分离
zookeeper 在dubbo架构中通常被用来做注册中心
nginx   web服务器 静态资源、反向代理、负载均衡 是程序的入口
redis	缓存 redis集群 安装在CentOS_Redis
solr	搜索引擎 索引框架 站内搜索 安装在CentOS_Redis
activemq 消息队列，发布的消息分为queue和topic两种
freemarker 和Jstl类似，可以用来在成功添加商品后实现页面静态化
mycat	实现数据库分片  使用端口8066

Invalid bound statement (not found): com.lwj.search.mapper.ItemMapper.getItemList
这个异常是因为ItemMapper.xml文件没有和ItemMapper文件在同一目录下，idea默认会读取src/main/resource下的文件作为配置文件
但ItemMapper.xml在src/main/java，所以需要在pom.xml中配置，这样会将java和resource下的配置文件都拷贝到classpath下
	<resources>
        <resource>
            <directory>src/main/java</directory>
            <includes>
                <include>**/*.properties</include>
                <include>**/*.xml</include>
            </includes>
            <filtering>false</filtering>
        </resource>
        <resource>
            <directory>src/main/resources</directory>
            <includes>
                <include>**/*.properties</include>
                <include>**/*.xml</include>
            </includes>
            <filtering>false</filtering>
        </resource>
        </resources>

??<dubbo:service interface="com.lwj.search.service.SearchService" ref="searchServiceImpl" timeout="600000"/>
??solr高亮问题


solr网页删除索引
<delete>
<query>*:*</query>
</delete>
<commit>

消息队列问题
在ItemServiceImpl中添加商品后，事务提交之前发送 消息，消息监听器接收消息后立即查询数据会查不到数据
解决方法
1.在监听器里延时1s等事务提交后再查数据库 Thread.sleep(1000);
2.延时发送消息，在Controller层调用service的add方法完成后发送消息

item.jsp中 items="${item.images }"  会去item对象中的getImages()

@RequestMapping("/item/{itemId}")
    public String showItemInfo(@PathVariable Long itemId, Model model){}

 <!-- springmvc的前端控制器 -->
  <servlet>
    <servlet-name>e3-item-web</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- contextConfigLocation不是必须的， 如果不配置contextConfigLocation， springmvc的配置文件默认在：WEB-INF/servlet的name+"-servlet.xml" -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/*.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup> //使tomcat启动的时候就初始化这个servlet，然后这个servlet再初始化spring容器
  </servlet>

对于分布式事务可以使用activemq消息队列来保证事务的最终一致性

集群：同样的代码部署多台服务器
分布式：把整个项目拆分成若干个工程，每个工程只完成一部分内容，整个业务流程需要多个系统之间配合才能完成

注册登录问题
1.tomcat集群上限的原因是服务器之间相互广播session，大量占用网络带宽，所以tomcat一般集群节点数不要超过5个
2.使用session服务器，sso系统，保存session信息，使每个tomcat节点都是无状态的，需要用redis来模拟session，所以节点可以接近无限，

@RequestMapping("/user/check/{parm}/{type}")
    @ResponseBody	//相当于response.write() 将返回的数据直接写到浏览器
    public E3Result checkData(@PathVariable String parm,@PathVariable Integer type){
        E3Result e3Result = registerService.checkData(parm, type);
        return e3Result;
    }
   
$.post("/user/register",$("#regForm_mod").serialize(), function(data){		表单提交序列化成key-value形式的

token	本质上是sessionId

？？cookie session

@RequestMapping(value = "/user/login",method = RequestMethod.POST)
@ResponseBody
public E3Result login(String username,String password,HttpServletRequest request, HttpServletResponse response){}
这个表单只提交了两个参数，在这里直接使用参数接收表单数据，username和password必须和表达提交的name属性一致
注入 request和response

？？day11 用户登录处理，表现层

(index):1 Failed to load http://localhost:8088/user/token/c9f2d810-500a-44e6-8d95-db71532df9d2: 
No 'Access-Control-Allow-Origin' header is present on the requested resource. 
Origin 'http://localhost:8082' is therefore not allowed access.
js浏览器跨域限制,8082下的js不能请求8088的数据，域名不同、ip地址不同、端口不同也属于跨域
js跨域请求，虽然可以成功发送请求，服务器也响应回数据，但是js无法在浏览器中取到响应的数据
可以使用jsonp，js虽然无法跨域请求数据，但是可以跨域请求文件，l例如<script src="http://***">


@RequestMapping(value = "/user/token/{token}",produces = "application/json;charset=utf-8")
相当于response.setContentType("application/json;charset=utf-8"); 让浏览器以json格式解析字符串

@RequestMapping(value = "/user/token/{token}")
        @ResponseBody
        public Object  getUserByToken(@PathVariable String token,String callback){
            E3Result e3Result = tokenService.getUserByToken(token);
            //响应之前，判断是否为jsonp请求
            if(StringUtils.isNotBlank(callback)){
                //把结果封装成一个js语句响应
              **  MappingJacksonValue mappingJacksonValue = new MappingJacksonValue(e3Result);
              **  mappingJacksonValue.setJsonpFunction(callback );
              **  return  mappingJacksonValue;
            }
            return e3Result;
    }
页面406异常：jquery-1.5.1.min.js?v=20160713:16 POST http://localhost:8090/cart/update/num/1295341/13.html 406 (Not Acceptable)
90%原因是没有导入json的包  
10%的原因是请求路径以.html结尾   解决方法.修改.html为.action 并在web.xml中添加拦截请求*.action

List<!-- <TbItem> --> cartList = getCartListFromCookie(request);
        //遍历商品列表找到对应商品
        for ( TbItem tbItem:cartList
        ) {
            if(tbItem.getId().longValue()==itemId){
                //删除商品
                cartList.remove(tbItem);
               !!!//跳出循环，不然会抛异常
                break;
            }
        }

@RequestMapping("/cart/delete/{itemId}")
    public String deleteCartItem(@PathVariable Integer itemId,HttpServletRequest request,
                                 HttpServletResponse  response ){
        //返回逻辑视图
        return  "redirect:/cart/cart.html";  !!页面跳转
    }

<!--拦截器配置-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.lwj.cart.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

test??
public String showOrderCart(HttpServletRequest request, Model model){
        TbUser user = (TbUser) request.getAttribute("user");
        List<TbItem> cartList = cartService.getCartList(user.getId());
//        model.addAttribute("cartList",cartList);	??
        request.setAttribute("cartList",cartList);
        return "order-cart";
    }

service层出现异常一定要向外抛，不然会影响事务的一致

./mycat stop
mycat 支持的命令{ console | start | stop | restart | status | dump } 

Linux # whereis my.cnf

